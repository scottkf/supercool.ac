// Generated by CoffeeScript 1.3.3
(function() {
  var LocaleManager;

  LocaleManager = (function() {

    function LocaleManager(locale_identifier, translations_by_locale) {
      this.translations_by_locale = translations_by_locale;
      if (locale_identifier) {
        this.setLocale(locale_identifier);
      }
    }

    LocaleManager.prototype.get = function(string_id, parameters) {
      var culture_map, string;
      if (!string_id) {
        return '';
      }
      if (this.locale_identifier) {
        culture_map = this.translations_by_locale[this.locale_identifier];
      }
      if (!culture_map) {
        return '';
      }
      string = culture_map.hasOwnProperty(string_id) ? culture_map[string_id] : '';
      if (arguments.length === 1) {
        return string;
      }
      return Knockback.toFormattedString.apply(null, [string].concat(Array.prototype.slice.call(arguments, 1)));
    };

    LocaleManager.prototype.getLocale = function() {
      return this.locale_identifier;
    };

    LocaleManager.prototype.setLocale = function(locale_identifier) {
      var model, _i, _len, _ref, _results;
      this.locale_identifier = locale_identifier;
      if (!window.Backbone) {
        return;
      }
      this.trigger('change', this);
      _ref = window.app.viewmodels.components.components.collection().models;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        _results.push(model.trigger('change'));
      }
      return _results;
    };

    LocaleManager.prototype.getLocales = function() {
      var locales, string_id, value, _ref;
      locales = [];
      _ref = this.translations_by_locale;
      for (string_id in _ref) {
        value = _ref[string_id];
        locales.push(string_id);
      }
      return locales;
    };

    LocaleManager.prototype.localeToURL = function(locale) {
      var locale_parts;
      locale_parts = locale.split('-');
      return locale_parts[0];
    };

    LocaleManager.prototype.localeToLabel = function(locale) {
      var locale_parts;
      locale_parts = locale.split('-');
      return locale_parts[locale_parts.length - 1].toUpperCase();
    };

    return LocaleManager;

  })();

  _.extend(LocaleManager.prototype, Backbone.Events);

  if (!kb) {
    throw new Error("Please include Knockback before the Locale Manager");
  }

  kb.locale_manager = new LocaleManager(null, {
    'en-US': {
      example: ''
    },
    'fr-FR': {
      example: ''
    },
    'it-IT': {
      example: ''
    },
    'ja': {
      example: ''
    },
    'pt-PT': {
      example: ''
    },
    'es-ES': {
      example: ''
    },
    'zh-CN': {
      example: ''
    }
  });

}).call(this);
